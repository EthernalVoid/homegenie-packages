<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.AddOption("LedsCount", "1", "Number of chained RGB leds", "text");
Program.Run();
</ScriptCondition>
  <ScriptSource>// Domain
string appDomain = "HomeAutomation.GroveRGB";
// Params
int ledsCount = (int)Program.Option("LedsCount").DecimalValue;
// Grove RGB modules
var rgbModules = Modules.InDomain(appDomain);
// Grove RGB Led GPIO settings
//var driver = new FileGpioConnectionDriver();
var driver = new GpioConnectionDriver();
var gpioOut1 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin13.ToProcessor());
var gpioOut2 = new GpioOutputBinaryPin(driver, ConnectorPin.P1Pin07.ToProcessor());
var groveRgb = new GroveRgbConnection(gpioOut1, gpioOut2, ledsCount);
// Allocate virtual modules for this app
Program.AddVirtualModules(appDomain, "Dimmer", "homegenie/generic/colorlight", 1, ledsCount);
// Default delay
double defaultDelay = 500;

// State object
var timings = new dynamic[ledsCount];

var GetHsb = new Func&lt;string,dynamic&gt;((hsb)=&gt;{
  dynamic color = new ExpandoObject();
  string[] parts = hsb.Split(',');
  color.H = double.Parse(parts[0] != "" ? parts[0] : "1", CultureInfo.InvariantCulture);
  color.S = double.Parse(parts.Length &gt; 1 &amp;&amp; parts[1] != "" ? parts[1] : "0", CultureInfo.InvariantCulture);
  color.B = double.Parse(parts.Length &gt; 2 &amp;&amp; parts[2] != "" ? parts[2] : "1", CultureInfo.InvariantCulture);
  return color;
});

var GetValueAt = new Func&lt;double,double,double,double,double&gt;((from, to, duration, offset)=&gt;{
  double range = (to-from);
  return from+(range/duration*offset);
});

var updateLeds = new Func&lt;bool&gt;(()=&gt;{
  bool iterateNext;
  while(Program.IsRunning) {
    do {
      iterateNext = false;
      for(int lednumber = 0; lednumber &lt; ledsCount; lednumber++) {
	  	lock (timings[lednumber]) {
          var item = timings[lednumber];
          if (item == null || item.timeEnd == null) continue;
          var timeSpan = new TimeSpan(item.timeEnd.Ticks-DateTime.Now.Ticks);
          if (timeSpan.TotalMilliseconds &gt; 0 &amp;&amp; timeSpan.TotalMilliseconds &lt;= item.duration) {
            var h = GetValueAt(item.currentColor.H, item.color.H, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var s = GetValueAt(item.currentColor.S, item.color.S, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var v = GetValueAt(item.currentColor.B, item.color.B, item.duration, item.duration-timeSpan.TotalMilliseconds);
            var t = new Thread(()=&gt;{
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(h, s, v));
            });
            t.Start();
            if (!t.Join(3500)) {
              Program.Notify("Grove RGB ERROR:A", "I/O error");
              t.Abort();
            }
            iterateNext = true;
            //groveRgb.SetColor(lednumber, RgbColor.FromHsv(h, s, v));
            //iterateNext = true;
          } else if (timeSpan.TotalMilliseconds &lt;= 0) {
            var t = new Thread(()=&gt;{
              groveRgb.SetColor(lednumber, RgbColor.FromHsv(item.color.H, item.color.S, item.color.B));
            });
            t.Start();
            if (!t.Join(3500)) {
              Program.Notify("Grove RGB ERROR:A", "I/O error\n"+Math.Round(item.color.H, 5));
              t.Abort();
            } else item.timeEnd = null;
            //groveRgb.SetColor(lednumber, RgbColor.FromHsv(item.color.H, item.color.S, item.color.B));
          }
  		}
      }
    } while (iterateNext &amp;&amp; Program.IsRunning);
    Pause(0.200);
  }
  return true;
});

var setColor = new Func&lt;int,dynamic,double,bool&gt;((lednumber, color, duration)=&gt;{
  lock (timings[lednumber]) {
    var item = timings[lednumber];
    item.currentColor = GetHsb(item.module.Parameter("Status.ColorHsb").Value);
    if (item.module.Level == 0) {
      item.currentColor.H = 0;
      item.currentColor.S = 1;
      item.currentColor.B = 0;
    }
    item.color = color;
    item.duration = duration;
    item.timeEnd = DateTime.Now.AddMilliseconds(duration);
  }
  return true;
});

// Initialize modules
for(int x = 0; x &lt; ledsCount; x++)
{
  var module = rgbModules.WithAddress((x+1).ToString()).Get();
  if (module.Parameter("Status.ColorHsb").Value == "")
  {
    module.Parameter("Status.ColorHsb").Value = "1,0,1";
  }
  var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
  if (module.Parameter("Status.Level").DecimalValue == 0)
  {
    currentColor.B = 0d;
  }
  var item = timings[x] = new ExpandoObject();
  item.module = rgbModules.WithAddress((x+1).ToString()).Get();
  setColor(x, currentColor, defaultDelay);
}

// Release GPIO driver if app is being stopped
When.ProgramStopping(()=&gt;{
  ((IDisposable)groveRgb).Dispose();
  return true;
});

// API calls handling
When.WebServiceCallReceived(appDomain, ( args ) =&gt; {
  try
  {
    var apiCall = Program.ParseApiCall(args.ToString());
    string lightnumber = apiCall.Address;
    var module = rgbModules.WithAddress(lightnumber).Get();
    int lightId = int.Parse(lightnumber) - 1;
    var currentColor = GetHsb(module.Parameter("Status.ColorHsb").Value);
    switch(apiCall.Command)
    {
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.On
      case "Control.On":
        setColor(lightId, currentColor, defaultDelay);
        Program.RaiseEvent(module, "Status.Level", currentColor.B.ToString(), "Groove RGB Led");
        Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;light_number&gt;/Control.Off
      case "Control.Off":
        currentColor.B = 0d;
        setColor(lightId, currentColor, defaultDelay);
        Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
        break;
      case "Control.Toggle":
        if (module.Parameter("Status.Level").DecimalValue == 0)
        {
          setColor(lightId, currentColor, 0);
          Program.RaiseEvent(module, "Status.Level", currentColor.B.ToString(), "Groove RGB Led");
          Program.RaiseEvent(module, "Status.ColorHsb", module.Parameter("Status.ColorHsb").Value, "Color Light");
        }
        else
        {
          currentColor.B = 0d;
          setColor(lightId, currentColor, defaultDelay);
          Program.RaiseEvent(module, "Status.Level", "0", "Groove RGB Led");
        }
        break;
      case "Control.Level":
        double level = (double.Parse(apiCall.GetOption(0)) / 100D);
        currentColor.B = level;
        setColor(lightId, currentColor, defaultDelay);
        Program.RaiseEvent(module, "Status.Level", level.ToString(), "Groove RGB Led");
        break;
      // eg. http://&lt;hg_address&gt;/api/HomeAutomation.GroveRGB/&lt;led_number&gt;/Control.ColorHsb/&lt;hue&gt;,&lt;sat&gt;,&lt;bri&gt;
      case "Control.ColorHsb":
        string[] values = apiCall.GetOption(0).Split(',');
        double transition = defaultDelay;
        if (values.Length &gt; 3) transition = ((int)(double.Parse(values[3]) * 1000)); 
        var color = GetHsb(apiCall.GetOption(0));
        setColor(lightId, color, transition);
        Program.RaiseEvent(module, "Status.Level", color.B.ToString(), "Groove RGB Led");
        Program.RaiseEvent(module, "Status.ColorHsb", apiCall.GetOption(0), "Color Light");
        break; 
    }
    return new ResponseText("OK "+module.Parameter("Status.ColorHsb").Value+"  --  "+currentColor.H);
    //return timings;
  } 
  catch (Exception e) 
  { 
    Program.Notify("Grove RGB ERROR:2", e.Message);
  }
  return new ResponseText("ERROR");
}); 

// Start leds driver thread
updateLeds();
</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>62</Address>
  <Name>Grove - Chainable RGB Led</Name>
  <Description>Chainable RGB color leds modules wired to GPIO#4 and GPIO#21/27 (power with 3v3).
http://www.seeedstudio.com/wiki/Grove_-_Chainable_RGB_LED</Description>
  <Group>Raspberry Pi</Group>
  <Features />
  <AutoRestartEnabled>false</AutoRestartEnabled>
  <ActivationTime>2018-09-25T16:20:50.15373Z</ActivationTime>
  <TriggerTime>2018-09-25T16:20:50.377856Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>
